<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.mzhotel.sm.userRole.mapper.UserRoleRelationMapper" >
  <resultMap id="BaseResultMap" type="com.mzhotel.sm.userRole.dto.UserRoleRelation" >
    <id column="ID" property="id" jdbcType="VARCHAR" />
    <result column="ROLE_CODE" property="roleCode" jdbcType="VARCHAR" />
    <result column="USER_ID" property="userId" jdbcType="VARCHAR" />
    <result column="CREATED_BY" property="createdBy" jdbcType="VARCHAR" />
    <result column="CREATED_DATE" property="createdDate" jdbcType="TIMESTAMP" />
    <result column="UPDATED_BY" property="updatedBy" jdbcType="VARCHAR" />
    <result column="UPDATED_DATE" property="updatedDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    ID, ROLE_CODE, USER_ID, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select 
    <include refid="Base_Column_List" />
    from T_USER_ROLE_RELATION
    where ID = #{id,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String" >
    delete from T_USER_ROLE_RELATION
    where ID = #{id,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByUserRoleCode">
    delete from T_USER_ROLE_RELATION
    where user_id = #{userId,jdbcType=VARCHAR} and role_code = #{roleCode,jdbcType=VARCHAR}
  </delete>
  <insert id="insert" parameterType="com.mzhotel.sm.userRole.dto.UserRoleRelation" >
    insert into T_USER_ROLE_RELATION (ID, ROLE_CODE, USER_ID, 
      CREATED_BY, CREATED_DATE, UPDATED_BY, 
      UPDATED_DATE)
    values (#{id,jdbcType=VARCHAR}, #{roleCode,jdbcType=VARCHAR}, #{userId,jdbcType=VARCHAR}, 
      #{createdBy,jdbcType=VARCHAR}, #{createdDate,jdbcType=TIMESTAMP}, #{updatedBy,jdbcType=VARCHAR}, 
      #{updatedDate,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.mzhotel.sm.userRole.dto.UserRoleRelation" >
    <selectKey resultType="java.lang.String" keyProperty="id" order="BEFORE">
      select uuid() from dual
    </selectKey>
    insert into T_USER_ROLE_RELATION
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        ID,
      </if>
      <if test="roleCode != null" >
        ROLE_CODE,
      </if>
      <if test="userId != null" >
        USER_ID,
      </if>
      <if test="createdBy != null" >
        CREATED_BY,
      </if>
      <if test="createdDate != null" >
        CREATED_DATE,
      </if>
      <if test="updatedBy != null" >
        UPDATED_BY,
      </if>
      <if test="updatedDate != null" >
        UPDATED_DATE,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=VARCHAR},
      </if>
      <if test="roleCode != null" >
        #{roleCode,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=VARCHAR},
      </if>
      <if test="createdBy != null" >
        #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null" >
        #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null" >
        #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedDate != null" >
        #{updatedDate,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.mzhotel.sm.userRole.dto.UserRoleRelation" >
    update T_USER_ROLE_RELATION
    <set >
      <if test="roleCode != null" >
        ROLE_CODE = #{roleCode,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        USER_ID = #{userId,jdbcType=VARCHAR},
      </if>
      <if test="createdBy != null" >
        CREATED_BY = #{createdBy,jdbcType=VARCHAR},
      </if>
      <if test="createdDate != null" >
        CREATED_DATE = #{createdDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedBy != null" >
        UPDATED_BY = #{updatedBy,jdbcType=VARCHAR},
      </if>
      <if test="updatedDate != null" >
        UPDATED_DATE = #{updatedDate,jdbcType=TIMESTAMP},
      </if>
    </set>
    where ID = #{id,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.mzhotel.sm.userRole.dto.UserRoleRelation" >
    update T_USER_ROLE_RELATION
    set ROLE_CODE = #{roleCode,jdbcType=VARCHAR},
      USER_ID = #{userId,jdbcType=VARCHAR},
      CREATED_BY = #{createdBy,jdbcType=VARCHAR},
      CREATED_DATE = #{createdDate,jdbcType=TIMESTAMP},
      UPDATED_BY = #{updatedBy,jdbcType=VARCHAR},
      UPDATED_DATE = #{updatedDate,jdbcType=TIMESTAMP}
    where ID = #{id,jdbcType=VARCHAR}
  </update>

  <select id="getUserRoleRelation" parameterType="com.mzhotel.sm.userRole.dto.QueryUserRoleRelation"
          resultType="com.mzhotel.sm.role.dto.Role">
    select
    t.*,
    created.username createdName,
    updated.username updatedName,
    info.SAVE_NAME saveName
    from T_ROLE t
    left join t_user created on created.user_id = t.created_by
    left join t_user updated on updated.user_id = t.updated_by
    left join T_DOCUMENT_INFO_RELATION relation on relation.RELATION_ID = t.id and relation.RELATION_TYPE='ROLE'
    left join T_DOCUMENT_INFO info on info.id = relation.DOCUMENT_ID
    <where>
      <if test="roleName">
        and t.role_name like concat ('%',#{roleName,jdbcType=VARCHAR},'%')
      </if>
      <if test="userHasRole != null and userHasRole != ''">
        and t.role_code in (select role_code from t_user_role_relation where USER_ID = #{userHasRole,jdbcType=VARCHAR})
      </if>
      <if test="userNotHasRole != null and userNotHasRole != ''">
        and t.role_code not in (select role_code from t_user_role_relation where USER_ID = #{userNotHasRole,jdbcType=VARCHAR})
      </if>
    </where>
  </select>
</mapper>